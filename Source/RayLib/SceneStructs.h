#pragma once

#include <vector>
#include <array>
#include <set>
#include <map>

#include "Vector.h"
#include "Matrix.h"
#include "SceneError.h"
#include "Types.h"
#include "HitStructs.h"

using MaterialId = uint32_t;
using SurfaceId = uint32_t;
using SurfaceDataId = uint32_t;

using TypeIdPair = std::pair<std::string, uint32_t>;
using IdPairing = std::pair<uint32_t, uint32_t>;
using IdTriplet = std::tuple<uint32_t, uint32_t, uint32_t>;
using IdPairings = std::array<IdPairing, SceneConstants::MaxPrimitivePerSurface>;

struct AccelGroupData
{
    std::string                     accelType;
    std::string                     primType;
    std::map<uint32_t, IdPairings>  matPrimIdPairs;
};

struct MatBatchData
{
    std::string         primType;
    std::string         matType;
    std::set<uint32_t>  matIds;
};

// Overall all material key listings of the scene
// This is generated by distributor which has access to overall node and GPUs
// on nodes etc.
// Main node (or any node with the same code) will generate partitioning
// of materials with this HitKey - Type Pair
using MaterialKeyListing = std::map<TypeIdPair, HitKey>;

enum class LightType
{
    POINT,
    DIRECTIONAL,
    SPOT,
    RECTANGULAR
};

struct LightStruct
{
    std::string     typeName;
    uint32_t        matId;
};

using TransformStruct = Matrix4x4;

struct SurfaceStruct
{
    std::string     acceleratorType;
    uint32_t        transformId;
    IdPairings      matPrimPairs;
    int8_t          pairCount;
};