#pragma once

/**

Path Node Related Structures

These structs are used to express chain of paths
which are usefull when a tracer needs to hold an entire information
about a path. (i.e MLT BDPT style tracers)

In initial case path node structs are crated to hold "Practical Path Guiding" related
information

*/

#include "RayLib/Vector.h"


// Path node is base class for path related data
// It is designed to have minimal memory footprint in order to save
// well memory especially on GPU Hardware
//
// For example only world position is kept
// wi/wo can be generated by hopping the next/previous path nodes and
// calculating these direction using world positions
struct PathNode
{
    // Local Position of the path
    Vector3f worldPosition;
    // By design all path chains are assumed to have
    // Camera -> Light ordering.
    // Meaning that if you keep accessing next 
    // you will end up on the light
    Vector2us prevNext;
    
    __device__ __forceinline__ Vector3f Wi(const PathNode* gNodeList);
    __device__ __forceinline__ Vector3f Wo(const PathNode* gNodeList);
};

__device__ __forceinline__ Vector3f PathNode::Wi(const PathNode* gNodeList)
{
    uint16_t next = prevNext[1];
    // Specifically put infinty here to catch some errors
    if(next == UINT16_MAX) return Vector3f(INFINITY);
    
    //
    Vector3f wi = gNodeList[next].worldPosition - worldPosition;
    return wi.Normalize();
}

__device__ __forceinline__ Vector3f PathNode::Wo(const PathNode* gNodeList)
{
    uint16_t prev = prevNext[0];
    // Specifically put infinty here to catch some errors
    if(prev == UINT16_MAX) return Vector3f(INFINITY);

    //
    Vector3f wi = gNodeList[prev].worldPosition - worldPosition;
    return wi.Normalize();
}

struct PathNode2 : public PathNode
{

};
