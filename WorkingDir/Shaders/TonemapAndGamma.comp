#version 430
/*
	**Reinhard 2002 Tone Map & Gamma correction Shader**

	File Name	: TonemapAndGamma.comp
	Author		: Bora Yalciner
	Description	:

		Partial Implementation of the Paper
		"Photographics Tone Reproduction for Digital Images"
		by Reinhard et al. and applies gamma correction.

		Only implemented Equation 1,2 and 4. Only global keys are supported
		there are no any gaussian rings to select optimal key per pixel.
		
		Additionally it applies gamma correction to the image assuming
		supplied image is in linear space
*/

// Defines
#define U_RES layout(location = 0)

#define T_IN_HDR_IMAGE layout(binding = 0)

#define UB_LUM_DATA layout(std140, binding = 0)
#define UB_TM_PARAMS layout(std140, binding = 1)

#define I_OUT_SDR_IMAGE layout(binding = 0) restrict writeonly

// Textures
uniform T_IN_HDR_IMAGE sampler2D tInImage;
// Images
uniform I_OUT_SDR_IMAGE image2D iSDROut;

// UBOs
UB_LUM_DATA uniform LuminanceData
{
	float outMaxLum;
	float outAvgLum;
};

UB_TM_PARAMS uniform Parameters
{
	bool	doToneMap;
	bool	doGamma;
	float	gammaValue;
	float	burnRatio;
};

// Uniforms
U_RES uniform ivec2 resolution;

// Functions
vec4 TonemapReinhard2002(in vec4 hdrColor)
{
	vec3 hdrColorPart = hdrColor.rgb;
	// Equation 3
	float white = outMaxLum * burnRatio;
	float whiteSqr = white * white;
	vec3 sdrColor = hdrColorPart * (1 + (hdrColorPart / whiteSqr));
	sdrColor /= (1 + hdrColorPart);

	return vec4(sdrColor, hdrColor.a);
}

// 16x16 block is always nice
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(void)
{
	// Call logic is per pixel
	uvec2 globalId = gl_GlobalInvocationID.xy;
	// Generate pixelIds
	ivec2 pixId = ivec2(globalId);

	// Skip out of image threads
	if(any(greaterThanEqual(globalId, resolution))) return;

	// Read from current buffer buffers
	vec4 hdrColorIn = texelFetch(tInImage, pixId, 0);

	vec4 sdrColorOut;
	if(doToneMap)	
		sdrColorOut = TonemapReinhard2002(hdrColorIn);
	else 
		sdrColorOut = hdrColorIn;

	// Check gamma correction
	if(doGamma)
		sdrColorOut.rgb = pow(sdrColorOut.rgb, vec3(1.0f/gammaValue));
	
	imageStore(iSDROut, pixId, sdrColorOut);
}